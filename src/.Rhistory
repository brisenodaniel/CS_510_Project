source('Data_Analysis.R')
fe_nrt_ave
cu_nrt
cu_n
source('Data_Analysis.R')
fe_nrt_ave
#get mean values
+ fe_nrt_ave <- colMeans(fe_nrt, na.rm = TRUE)
+ hg_nrt_ave <- colMeans(hg_nrt, na.rm = TRUE)
+ cu_nrt_ave <- colMeans(cu_nrt, na.rm = TRUE)
+ b2mg_nrt_ave <- colMeans(b2mg_nrt, na.rm = TRUE)
+ 
+ 

""
fe_nrt_ave
class(fe_nrt_ave)
df_t <- cbind(t(fe_nrt_ave), 'Subset'='Fe')
df_d
df_t
df_t = data.frame(df_t)
df_t
df_t
df_t[,12]
df_t[,-12]
round_df(df_t)
round_df(df_2,2)
round_df(df_t, 2)
round_df
round_df(df_t,2)
round
apply(df_t, mode)
sapply(df_t, mode)
source(Dependencies.R)
str_detect("12.32", d*\.?\d*)
str_detect("12.32", "d*\.?\d*")
str_detect("12.32", @"d*\.?\d*")
str_detect("12.32", "d*\.?\d*")
str_detect("12.32", "\d*\.?\d*")
str_detect("12.32", "\\d*\\.?\\d*")
str_detect("12.32s", "\\d*\\.?\\d*")
str_detect("12.32sss", "\\d*\\.?\\d*")
str_detect("12.32ssdfdfafs", "\\d*\\.?\\d*")
str_detect("hehe", "\\d*\\.?\\d*")
str_detect("hehe", "^\\d*\\.?\\d*$")
str_detect("12.2", "^\\d*\\.?\\d*$")
str_detect("12.2s", "^\\d*\\.?\\d*$")
str_detect("12.", "^\\d*\\.?\\d*$")
str_detect("12.sdfsdfafadaf", "^\\d*\\.?\\d*$")
str_detect("", "^\\d*\\.?\\d*$")
df_t
df_t
df_t
fe_nrt
df_t[,-12]
df_t = cbind(t(fe_nrt_ave), 'Subset'='Fe') %>% data.frame
df+t
df_t
sapply(df_t, mode)
sapply(df_t, numeric_regex)
numeric_regex
sapply(df_t, numeric_regex)
sapply(df_t, numeric_regex)==TRUE
df_t[,sapply(df_t, numeric_regex)]
df_t
sapply(df_t, mode)

df_t = cbind(t(fe_nrt_ave), 'Subset'='Fe') %>% data.frame
df_t
d
df_t1 = data.frame(fe_nrt_ave)
df_t1
df_t1 = data.frame(t(fe_nrt_ave))
df_t1
sapply(df_t1, mode)
df_t1 = df_t1 %>% cbind("Subset"="Fe")
df_t1
sapply(df_t1, mode)

df_t = cbind(t(fe_nrt_ave), 'Subset'='Fe') %>% data.frame

df_t = cbind(t(fe_nrt_ave), 'Subset'='Fe') %>% data.frame
c =  readRDS('../Output/control_err.rds') 
c
c
c
c
c
c
c
c
                                        # Load Dependencies
+ source('Dependencies.R')
+ 
+                                         # Helper Functions
+ 
+ ## The following functions are used throughout this document
+ ##    to format data appropriately for placement in
+ ##    tables and plots
+ round_df <- function(df, digits){
+   ## This function round all numeric vectors in a dataframe
+   ## Params:
+   ##    df: Dataframe to round
+   ##    digits: number of digits to round to. If null function returns
+   ##      original dataframe
+   ## Returns: df with all numeric vectors rounded to the desired
+   ##       digits
+   if (is.null(digits))
+     return(df)
+   numeric_columns <- sapply(df, mode) == 'numeric'
+   df[numeric_columns] <- round(df[numeric_columns],digits)
+   return(df)
+ }
+ 
+ flt <- function(df, subset_id){
+   ## This function returns a dataframe containing rows in
+   ##   in df where the subset attribute is equal to subset_id.
+   ##   The returned dataframe will not contain a subset column.
+   ## Params:
+   ##    df: dataframe to filter, should have a `subset` column
+   ##    subset_id: string, the value to filter for
+   filtered_df <- df %>%
+       filter(subset==subset_id) %>%
+       select(-subset)
+     return(filtered_df)
+ }
+ 
+ attach_lbl <- function(vec,subset, digits=2, subset_lbl='Subset'){
+   ## This function takes in a single named list and returns a dataframe
+   ## containing the original list entries rounded to the number of decimals
+   ## determined by the digits param, with an added column containing a
+   ## string label determined by the subset param. The name of this column will
+   ## be determined by the subset_lbl param.
+   ##   Params:
+   ##      vec: The list/vector to convert to a dataframe and label
+   ##      subset: A string to be inserted into a new column in the dataframe.
+   ##          typically, a label indicating which subset of the superconductor
+   ##          data the data in vec was collected on.
+   ##      digits: An int, the number of digits to round entries in vec to
+   ##      subset_lbl: The column name for the new column containing `subset`, defaults
+   ##          to 'Subset'
+   ##   Returns: A dataframe containing the data in `vec`, with column names equal to the
+   ##          names of the entires of `vec`, if specified, and containing a new column
+   ##          named `subset_lbl` with entry `subset`.
+ 
+   ## Add the subset label and convert to a dataframe
+   df <- data.frame(t(vec)) %>%
+     cbind(subset_lbl = subset) %>%
+     round_df(digits)
+   return(df)
+ }
+ 
+ make_numeric <- function(df, digits=NULL){
+   ## This function converts all columns in df containing only strings
+   ##  representing decimals to numeric types. Additionally, if digits is
+   ##  speicified, this function will round all decimal entries in df to
+   ##  the specified number of decimal places.
+   ##    Params:
+   ##       df: Dataframe, must contain only strings as data.
+   ##       digits: Number of decimal places to round decimal entires in
+   ##         df. If not specified or NULL, no rounding will take place.
+   ##    Returns: df, but with all columns containing decimal strings converted
+   ##         to numeric type.
+   numeric_regex <- function(str) str_detect(str, "^\\d*\\.?\\d*$")
+   numeric_cols <- sapply(df, numeric_regex)
+   df[, numeric_cols] <- as.numeric(df[,numeric_cols]) %>%
+     round(digits)
+   return(df)
+ }
+ 
+ make_summary_df <- function(df, digits=NULL){
+   ## This function takes in a dataframe as read in from
+   ##  the Output folder and outputs a new dataframe
+   ##  of the column means of all numeric entries
+   ## Params:
+   ##   df: Dataframe, must be a dataframe as outputted by
+   ##    ErrorWriter.R into the ../Output folder.
+   ##   digits: Int, number of decimal places to round numeric 
+   ##    entries in output dataframe
+   ## Returns: A dataframe containing column means of all numeric columns
+   ##    in df
+ 
+   df <- df %>%
+     make_numeric() %>%
+     colmeans(na.rm=TRUE) %>%
+     t() %>%
+     round_df(digits) %>%
+     select(-correct_cnt)
+   return(df)
+ }

make_summary_df
pred_q
train
elemental_nrt_ave
elemental_rt_ave
make_summary_df
elemental_nrt_ave
elemental_nrt_ave
round_df
make_summary_df(control)
control
class(control)
class(control)
make_summary_df(control)
make_numeric(control)
control
sapply(control,mode)
control

control <- readRDS('../Output/control_err.rds')
control

control <- readRDS('../Output/control_err.rds')
control
sapply(control, mode)
sapply(control, as.numeric)
data.frame(sapply(control, as.numeric))
sapply(data.frame(sapply(control, as.numeric)), mode)
make_summary_df(control)
control %>% colMeans()
class(control%>% colMeans())
make_summary_df(control)
control_ave
make_summary_df(control,3)
control_toprint
sprintf("../Plots/%s", "hi"")
""
sprintf("../Plots/%s", "hi")
decile 
pred_q
quart
decile
quart

pred_q
?muatate
?mutate
decile
quart
quart 
control_df
subs = ('Fe','Hg','Cu',)
subs = c('Fe','Hg','Cu','B2Mg')
subs
test_f = function(s) flt(elemental_rt, s)
test_f
vapply(subs, test_f)
sapply(subs, test_f)
sapply(subs, test_f)
flt(elemental_rt, 'Mg')
sapply(subs, test_f)[[1]]
sapply(subs, test_f)[1]
sapply(subs, test_f)[,1]
elemental_rt
data.frame(sapply(subs, test_f)[,1])
data.frame(apply(subs, test_f)[,1])
data.frame(apply(subs,2, test_f)[,1])
data.frame(apply(subs,1, test_f)[,1])
filtered_elem = sapply(subs, test_f)
filtered_elem
apply(filtered_elem, 2, data.frame)
apply(filtered_elem, 2, data.frame) %>% colMeans()
apply(filtered_elem, 2, data.frame) %>% sapply(colMeans)
class(apply(filtered_elem, 2, data.frame) %>% sapply(colMeans))
filtered_elem %>% sapply(colMeans)
filtered_elem %>% apply(2,colMeans)
filtered_elem
filtered_elem[,1]
mean(filtered_elem[,1])
lapply(filtere_elem, mean)
lapply(filtered_elem, mean)
filtered_elem
filtered_elem[,1]
filtered_elem %>% apply(2, lapply(mean))
filtered_elem %>% apply(2, lapply(1,mean))
lapply
filtered_elem
lapply(filterd_elem[,1], mean)
lapply(filtered_elem[,1], mean)
filtered_elem %>% apply(2, data.frame)
subset_tst = function(df_s) make_summary_df(df_s, 2)
filtered_elem %>% apply(2, data.frame) %>% subset_tst
filtered_elem %>% apply(2, data.frame) %>% lapply(subset_tst)
subs
filtered_elem %>% apply(2, data.frame) %>% lapply(subset_tst)[[1]] %>% cbind('Subset')
filtered_elem %>% apply(2, data.frame) %>% lapply(subset_tst)
filtered_elem %>% apply(2, data.frame) %>% lapply(subset_tst)[[1]]
filtered_elem_dfs = filtered_elem %>% apply(2, data.frame) %>% lapply(subset_tst)
filtered_elem_dfs[[1]]
filtered_elem_dfs[[1]] %>% cbind('Subset'='Fe')
class(filtered_elem_dfs[[1]] %>% cbind('Subset'='Fe'))
class(filtered_elem_dfs[[1]] %>% cbind('Subset'='Fe'))
filtered_elem_dfs[[1]] %>% mutate('Subset'='Fe')
subs
make_subset_summary_df(subs, elemental_rt)
make_subset_summary_df(subs, elemental_rt)
make_subset_summary_df(subs, elemental_rt) 
make_subset_summary_df(subs, elemental_rt,digits=2) 
make_subset_summary_df(subs, elemental_rt,subset_lbl='Element',digits=2) 
foobar =make_subset_summary_df(subs, elemental_rt,subset_lbl='Element',digits=2) 
foobar
foobar[['boo']] = 'n'
foobar
make_subset_summary_df <- function(subsets, df, subset_lbl='subset', digits=NULL){
+   subset_filter <- function(subset) flt(df,subseti)
+   make_subset_df <- function(df_subset) make_summary_df(df_subset, digits)
+   subset_dfs <- sapply(subsets,subset_filter) %>%
+     apply(2,data.frame) %>%
+     lapply(make_subset_df)
+   reattach_subset_lbl <- function(subset){
+     subset_dfs[[subset]] <<- subset_dfs[[subset]] %>%
+       mutate('{subset_lbl}':=subset)
+   }
+   subset_dfs <- lapply(subsets,reattach_subset_lbl)
+   subset_df <-  condense(subset_dfs)
+   return(subset_df)
+ }
+ 

make_subset_summary_df <- function(subsets, df, subset_lbl='subset', digits=NULL){
+   subset_filter <- function(subset) flt(df,subseti)
+   make_subset_df <- function(df_subset) make_summary_df(df_subset, digits)
+   subset_dfs <- sapply(subsets,subset_filter) %>%
+     apply(2,data.frame) %>%
+     lapply(make_subset_df)
+   reattach_subset_lbl <- function(subset){
+     subset_dfs[[subset]] <<- subset_dfs[[subset]] %>%
+       mutate('{subset_lbl}':=subset)
+   }
+   subset_dfs <- lapply(subsets,reattach_subset_lbl)
+   subset_df <-  condense(subset_dfs)
+   return(subset_df)
+ }
+ 

make_subset_summary_df <- function(subsets, df, subset_lbl='subset', digits=NULL){
+   subset_filter <- function(subset) flt(df,subseti)
+   make_subset_df <- function(df_subset) make_summary_df(df_subset, digits)
+   subset_dfs <- sapply(subsets,subset_filter) %>%
+     apply(2,data.frame) %>%
+     lapply(make_subset_df)
+   reattach_subset_lbl <- function(subset){
+     subset_dfs[[subset]] <<- subset_dfs[[subset]] %>%
+       mutate('{subset_lbl}':=subset)
+   }
+   subset_dfs <- lapply(subsets,reattach_subset_lbl)
+   subset_df <-  condense(subset_dfs)
+   return(subset_df)
+ }
+ 

s
make_subset_summary_df(subs, elemental_rt,subset_lbl='Element',digits=2) 
